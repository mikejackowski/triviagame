{"version":3,"sources":["modules/Layout/Layout.styled.js","store/game/actions.ts","store/questions/actions.ts","store/actions.ts","modules/Common/colorVariables.js","modules/Common/Button/Button.styled.js","modules/Common/Button/Button.component.tsx","modules/Common/Loader/Loader.styled.js","modules/Common/Loader/Loader.tsx","modules/Question/Question.styled.js","modules/Question/Question.component.tsx","modules/Game/Game.styled.js","modules/Game/Game.component.tsx","modules/Header/Header.styled.js","store/game/state.ts","modules/Header/Header.component.tsx","modules/Menu/Menu.styled.js","modules/Menu/Menu.component.tsx","modules/Summary/Summary.styled.js","modules/Summary/Summary.component.tsx","modules/Layout/Layout.component.tsx","store/game/reducer.ts","store/questions/state.ts","store/questions/reducer.ts","store/rootReducer.ts","App.tsx","index.tsx"],"names":["Wrapper","styled","div","_templateObject","LayoutWrapper","_templateObject2","setQuestionsType","questionsType","type","setDifficulty","difficulty","setGameLenght","gameLenght","setPlayerName","playerName","addPoint","finishGame","startGame","setNewGame","setHighScore","highScore","setQuestionsArray","questionsArray","changeCurrentQuestion","currentQuestionId","answerQuestion","questionId","answer","getQuestsions","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","getState","state","questionsUrl","questions","wrap","_context","prev","next","game","concat","axios","get","sent","data","response_code","abrupt","results","map","el","index","push","category","correctAnswer","correct_answer","id","incorrectAnswers","incorrect_answers","question","userAnswer","t0","stop","_x","_x2","apply","this","arguments","actions","gameActions","questionActions","colorTheme","activeFont","disabledBackground","inactiveFont","Button","button","Button_styled_templateObject","ActionButton","Button_styled_templateObject2","props","action","react_default","createElement","disabled","onClick","onButtonClick","children","Button_styled_Button","defaultProps","LoaderWrapper","Loader_styled_templateObject","LoaderBubble","Loader_styled_templateObject2","Loader","QuestionWrapper","Question_styled_templateObject","QuestionComponent","he","decode","GameWrapper","Game_styled_templateObject","LoadingWrapper","Game_styled_templateObject2","CategoryWrapper","_templateObject3","AnswerButtonWrapper","_templateObject4","Game","_this","length","checkHighScore","score","prepareAnswers","currentQuestion","sort","b","Math","random","_this2","_this$props","objectSpread","isLoading","answersArr","Question_component","Button_component","key","Common_Loader_Loader","Component","connect","getQuestions","Difficulty","QuestionsType","GameLenght","Header_styled_templateObject","Header","gameInProgress","Header_styled_Wrapper","gameFinished","initialState","EASY","SHORT","SINGLE","MenuWrapper","Menu_styled_templateObject","SettingWrapper","Menu_styled_templateObject2","InputWrapper","Menu_styled_templateObject3","InputWithControlsWrapper","Menu_styled_templateObject4","GameSetting","_templateObject5","DifficultyButtonWrapper","_templateObject6","PlayerNameInput","input","_templateObject7","theme","PreviousHighScoreDiv","_templateObject8","Menu","playerNameInputHandler","e","currentTarget","value","difficultyHandler","changeTo","MEDIUM","HARD","gameLenghtHandler","AVERAGE","LONG","questionsTypeHandler","MULTI","toBeatScore","placeholder","onChange","toFixed","SummaryWrapper","Summary_styled_templateObject","ScoreWrapper","Summary_styled_templateObject2","ScoreDiv","Summary_styled_templateObject3","ScoreSpan","span","Summary_styled_templateObject4","Summary_styled_templateObject5","QuestionsWrapper","Summary_styled_templateObject6","Answer","Summary_styled_templateObject7","Question","Summary_styled_templateObject8","AnswerText","_templateObject9","Summary","loadNewGame","Summary_styled_QuestionWrapper","toUpperCase","array","Layout","Header_component","Game_component","Summary_component","Menu_component","gameReducer","undefined","gameStartRequested","gameStartCompleted","questionReducer","i","getQuestionsRequested","getQuestionsSuccess","rootReducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","App","es","Layout_component","ReactDOM","render","react","dist","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.bce89e8a.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: grid;\n  width: 375px;\n  height: 812px;\n  grid-template-rows: 10% 90%;\n  border: 2px dashed gray;\n  border-radius: 5px;\n  box-sizing: border-box;\n`\n\nexport const LayoutWrapper = styled.div`\n  display: grid;\n  width: 100%;\n  height: 100%;\n  justify-content: center;\n`","import * as actionTypes from './actionTypes';\nimport { Difficulty, GameLenght, QuestionsType } from './state';\n\nexport const setQuestionsType = (questionsType: QuestionsType): actionTypes.SetQuestionsType => ({\n  questionsType,\n  type: '@game/SetQuestionsType',\n});\n\nexport const setDifficulty = (difficulty: Difficulty): actionTypes.SetDifficulty => ({\n  difficulty,\n  type: '@game/SetDifficulty',\n});\n\nexport const setGameLenght = (gameLenght: GameLenght): actionTypes.SetGameLenght => ({\n  gameLenght,\n  type: '@game/SetGameLenght',\n});\n\nexport const setPlayerName = (playerName: string): actionTypes.SetPlayerName => ({\n  playerName,\n  type: '@game/SetPlayerName',\n});\n\nexport const addPoint = (): actionTypes.AddPoint => ({\n  type: '@game/AddPoint'\n});\n\nexport const finishGame = (): actionTypes.FinishGame => ({\n  type: '@game/FinishGame'\n});\n\nexport const startGame = (): actionTypes.StartGame => ({\n  type: '@game/StartGame'\n});\n\nexport const setNewGame = (): actionTypes.SetNewGame => ({\n  type: '@game/SetNewGame'\n});\n\nexport const setHighScore = (highScore: number): actionTypes.SetHighScore => ({\n  highScore,\n  type: 'game/SetHighScore'\n});\n","import axios from 'axios';\nimport { Dispatch } from 'react';\nimport { RootState } from '../rootState';\nimport * as actionTypes from './actionTypes';\nimport { IQuestion, Question } from './state';\n\nconst getQuestionsRequested = (): actionTypes.GetQuestionsRequested => ({\n  type: '@question/GetQuestionsRequested'\n});\n\nconst getQuestionsFailed = (): actionTypes.GetQuestionsFailed => ({\n  type: '@question/GetQuestionsFailed'\n});\n\nconst getQuestionsSuccess = (): actionTypes.GetQuestionsSuccess => ({\n  type: '@question/GetQuestionsSuccess'\n});\n\nexport const setQuestionsArray = (questionsArray: Question[]): actionTypes.SetQuestionsArray => ({\n  questionsArray,\n  type: '@question/SetQuestionsArray'\n});\n\nexport const changeCurrentQuestion = (currentQuestionId: number): actionTypes.ChangeCurrentQuestion => ({\n  currentQuestionId,\n  type: '@question/ChangeCurrentQuestion'\n});\n\nexport const answerQuestion = (questionId: number, answer: string): actionTypes.AnswerQuestion => ({\n  answer,\n  questionId,\n  type: '@question/AnswerQuestion',\n});\n\nexport const getQuestsions = () => {\n  return async (dispatch: Dispatch<actionTypes.QuestionAction>, getState: () => RootState) => {\n    dispatch(getQuestionsRequested());\n    const state = getState();\n    try {\n      const baseUrl = 'https://opentdb.com/api.php?';\n      const difficulty = state.game.difficulty;\n      const gameLenght = state.game.gameLenght;\n      const questionsType = state.game.questionsType;\n      const questionsUrl = baseUrl.concat(`amount=${gameLenght}&difficulty=${difficulty}&type=${questionsType}`);\n\n      const questions = await axios.get(questionsUrl);\n      if (questions.data.response_code !== 0) {\n        return dispatch(getQuestionsFailed());\n      }\n\n      const questionsArray: Question[] = [];\n      questions.data.results.map((el: IQuestion, index: number) => {\n        questionsArray.push({\n          category: el.category,\n          correctAnswer: el.correct_answer,\n          difficulty: el.difficulty,\n          id: index,\n          incorrectAnswers: el.incorrect_answers,\n          question: el.question,\n          type: el.type,\n          userAnswer: '',\n        });\n      });\n      dispatch(setQuestionsArray(questionsArray));\n      dispatch(getQuestionsSuccess());\n    } catch (err) {\n      dispatch(getQuestionsFailed());\n    }\n  };\n};\n","import * as gameActions from './game/actions';\nimport * as questionActions from './questions/actions';\n\nconst actions = {\n  game: gameActions,\n  question: questionActions,\n};\n\nexport default actions;\n","export const colorTheme = {\n  activeFont: `rgba(75, 75, 75, 1)`,\n  disabledBackground: `#bbb`,\n  inactiveFont: `rgba(132, 132, 132, 0.75)`\n};","import styled from 'styled-components';\nimport { colorTheme } from '../colorVariables';\n\nexport const Button = styled.button`\n  display: grid;\n  width: 100%;\n  height: 100%;\n  align-items: center;\n  padding: 5px;\n  font-size: 25px;\n  font-weight: bold;\n  border: 2px dashed white;\n  border-radius: 10px;\n  background-color: orange;\n  justify-self: center;\n  text-transform: uppercase;\n  color: white;\n\n  &:disabled,\n   &--disabled {\n     color: ${colorTheme.inactiveFont};\n     background-color: ${colorTheme.disabledBackground};\n     pointer-events: none;\n  }\n`\n\nexport const ActionButton = styled(Button)`\n  height: 70px;\n`\n\n","import React, { ReactNode } from 'react';\nimport * as Styled from './Button.styled';\n\ntype IProps = {\n  children?: ReactNode;\n  disabled?: boolean;\n  onButtonClick: () => void;\n  action?: boolean;\n};\n\nconst Button: React.SFC<IProps> = props => {\n\n  if (props.action) {\n    return (\n      <Styled.ActionButton\n        disabled={props.disabled}\n        onClick={props.onButtonClick}\n      >\n        {props.children}\n      </Styled.ActionButton>\n    );\n  }\n\n  return (\n    <Styled.Button\n      disabled={props.disabled}\n      onClick={props.onButtonClick}\n    >\n      {props.children}\n    </Styled.Button>\n  );\n};\n\nButton.defaultProps = {\n  disabled: false\n};\n\nexport default Button;\n","import styled from 'styled-components';\n\nexport const LoaderWrapper = styled.div`\n  position: relative;\n  display: inline-block;\n  width: 64px;\n  height: 40px;\n  margin: 0 auto;\n`\n\nexport const LoaderBubble = styled.div`\n  position: absolute;\n  top: 20px;\n  width: 11px;\n  height: 11px;\n  animation-timing-function: cubic-bezier(0, 1, 1, 0);\n  background: #424242;\n  border-radius: 50%;\n\n  :nth-child(1) {\n    left: 6px;\n    animation: loaderEllipsisAppear 0.6s infinite;\n  }\n\n  :nth-child(2) {\n    left: 6px;\n    animation: loaderEllipsisMove 0.6s infinite;\n  }\n:nth-child(3) {\n    left: 26px;\n    animation: loaderEllipsisMove 0.6s infinite;\n  }\n:nth-child(4) {\n    left: 45px;\n    animation: loaderEllipsisDisappear 0.6s infinite;\n  }\n  @keyframes loaderEllipsisAppear {\n  0% {\n    transform: scale(0);\n  }\n\n  100% {\n    transform: scale(1);\n  }\n}\n\n  @keyframes loaderEllipsisDisappear {\n    0% {\n      transform: scale(1);\n    }\n\n    100% {\n      transform: scale(0);\n    }\n  }\n\n  @keyframes loaderEllipsisMove {\n    0% {\n      transform: translate(0, 0);\n    }\n\n    100% {\n      transform: translate(19px, 0);\n    }\n}\n`\n\n\n\n\n\n","import React from 'react';\nimport * as Styled from './Loader.styled';\n\nconst Loader = () => {\n  return (\n    <Styled.LoaderWrapper>\n      <Styled.LoaderBubble />\n      <Styled.LoaderBubble />\n      <Styled.LoaderBubble />\n      <Styled.LoaderBubble />\n    </Styled.LoaderWrapper>\n  );\n};\n\nexport default Loader;\n","import styled from 'styled-components';\nimport { colorTheme } from '../Common/colorVariables';\n\nexport const QuestionWrapper = styled.div`\n  display: grid;\n  place-items: center;\n  color: ${colorTheme.activeFont};\n  font-size: 2em;\n  text-align: center;\n`;\n","import he from 'he';\nimport React from 'react';\nimport * as Styled from './Question.styled';\n\ntype IProps = {\n  question: string;\n};\n\nconst QuestionComponent: React.SFC<IProps> = props => {\n\n  return (\n    <Styled.QuestionWrapper>\n      {he.decode(props.question)}\n    </Styled.QuestionWrapper>\n  );\n};\n\nQuestionComponent.defaultProps = {\n  question: '',\n};\n\nexport default QuestionComponent;\n","import styled from 'styled-components';\nimport { colorTheme } from '../Common/colorVariables';\n\nexport const GameWrapper = styled.div`\n  display: grid;\n  width: 100%;\n  height: 100%;\n  grid-template-rows: 10% 45% 45%;\n  padding: 5%;\n  align-items: center;\n  box-sizing: border-box;\n`\n\nexport const LoadingWrapper = styled(GameWrapper)`\n  grid-template-rows: 1fr;\n`\nexport const CategoryWrapper = styled.div`\n  text-align: center;\n  font-size: 1.5em;\n  text-transform: uppercase;\n  font-style: italic;\n  color: ${colorTheme.activeFont};\n`\n\nexport const AnswerButtonWrapper = styled.div`\n  display: grid;\n  grid-row-gap: 10px;\n  width: 100%;\n  height: 100%;\n  place-items: center;\n  box-sizing: border-box;\n`","import he from 'he';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport actions from '../../store/actions';\nimport { Question } from '../../store/questions/state';\nimport { RootState } from '../../store/rootState';\nimport Button from '../Common/Button/Button.component';\nimport Loader from '../Common/Loader/Loader';\nimport QuestionComponent from '../Question/Question.component';\nimport * as Styled from './Game.styled';\n\ntype DispatchProps = {\n  getQuestions: () => void;\n  addPoint: () => void;\n  changeCurrentQuestion: (questionId: number) => void;\n  finishGame: () => void;\n  answerQuestion: (questionId: number, answer: string) => void;\n  setHighScore: (score: number) => void;\n};\n\ntype StateProps = {\n  questionsArray: Question[];\n  isLoading: boolean\n  currentQuestionId: number;\n  score: number;\n  highScore: number;\n};\n\ntype IState = {};\ntype IProps = {};\n\ntype Props = DispatchProps & StateProps & IProps;\n\nclass Game extends Component<Props, IState> {\n\n  answerQuestion = (questionId: number, answer: string) => () => {\n    this.props.answerQuestion(questionId, answer);\n    const correctAnswer = this.props.questionsArray[this.props.currentQuestionId].correctAnswer;\n    if (answer === correctAnswer) {\n      this.props.addPoint();\n    }\n    if (this.props.questionsArray.length === this.props.currentQuestionId + 1) {\n      this.checkHighScore();\n      this.props.finishGame();\n    }\n    this.props.changeCurrentQuestion(this.props.currentQuestionId + 1);\n  }\n\n  checkHighScore = () => {\n    const score = ((this.props.score / (this.props.questionsArray.length)) * 100);\n    if (score > this.props.highScore) {\n      this.props.setHighScore(score);\n    }\n  }\n\n  prepareAnswers = (currentQuestion: Question) => {\n    return currentQuestion.incorrectAnswers.concat(\n      currentQuestion.correctAnswer).sort((a, b) => 0.5 - Math.random()\n    );\n  }\n\n  render() {\n    const { questionsArray, currentQuestionId } = { ...this.props };\n    if (this.props.questionsArray.length > 0 && !this.props.isLoading) {\n      let answersArr: string[] = [];\n      const currentQuestion = questionsArray[currentQuestionId];\n      answersArr = this.prepareAnswers(currentQuestion);\n\n      return (\n        <Styled.GameWrapper>\n          <Styled.CategoryWrapper>\n            {currentQuestion.category}\n          </Styled.CategoryWrapper>\n          <QuestionComponent question={currentQuestion.question}/>\n          <Styled.AnswerButtonWrapper>\n            {answersArr.map(answer => {\n              return (\n                <Button action={true} key={answer} onButtonClick={this.answerQuestion(currentQuestionId, answer)}>\n                  {he.decode(answer)}\n                </Button>\n              );\n            })}\n          </Styled.AnswerButtonWrapper>\n        </Styled.GameWrapper>\n      );\n    }\n\n    return (\n      <Styled.LoadingWrapper>\n        <Loader/>\n      </Styled.LoadingWrapper>\n    );\n  }\n}\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  currentQuestionId: state.questions.currentQuestionId,\n  highScore: state.game.highScore,\n  isLoading: state.questions.isLoading,\n  questionsArray: state.questions.questionsArray,\n  score: state.game.score,\n});\n\n// tslint:disable-next-line:no-any\nconst mapDispatchToProps = (dispatch: ThunkDispatch<{}, {}, any>): DispatchProps => ({\n  addPoint: () => dispatch(actions.game.addPoint()),\n  answerQuestion: (questionId: number, answer: string) => dispatch(actions.question.answerQuestion(questionId, answer)),\n  changeCurrentQuestion: (questionId: number) => dispatch(actions.question.changeCurrentQuestion(questionId)),\n  finishGame: () => dispatch(actions.game.finishGame()),\n  getQuestions: () => dispatch(actions.question.getQuestsions()),\n  setHighScore: (score: number) => dispatch(actions.game.setHighScore(score)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  width: 100%;\n  height: 100%;\n  padding: 5px;\n  align-items: center;\n  color: white;\n  justify-content: center;\n  background-color: #e3e3e3;\n  box-sizing: border-box;\n  -webkit-text-stroke: 2px orange;\n  font-size: 3em;\n  font-weight: bold;\n  text-transform: uppercase;\n`\n","export enum Difficulty {\n  EASY = 'easy',\n  MEDIUM = 'medium',\n  HARD = 'hard'\n}\n\nexport enum QuestionsType {\n  SINGLE = 'boolean',\n  MULTI = 'multiple'\n}\n\nexport enum GameLenght {\n  SHORT = 5,\n  AVERAGE = 10,\n  LONG = 15\n}\n\nexport interface GameState {\n  isLoading: boolean;\n  gameInProgress: boolean;\n  gameFinished: boolean;\n  playerName: string;\n  difficulty: Difficulty;\n  gameLenght: GameLenght;\n  score: number;\n  questionsType: QuestionsType;\n  highScore: number;\n}\n\nexport const initialState: GameState = {\n  difficulty: Difficulty.EASY,\n  gameFinished: false,\n  gameInProgress: false,\n  gameLenght: GameLenght.SHORT,\n  highScore: 0,\n  isLoading: false,\n  playerName: '',\n  questionsType: QuestionsType.SINGLE,\n  score: 0,\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { RootState } from '../../store/rootState';\nimport * as Styled from './Header.styled';\n\ntype IProps = {};\ntype IState = {};\ntype StateProps = {\n  gameInProgress: boolean;\n  currentQuestionId: number;\n  gameLenght: number;\n  gameFinished: boolean;\n};\n\ntype Props = IProps & StateProps;\n\nclass Header extends Component<Props, IState> {\n\n  render() {\n\n    if (this.props.gameInProgress) {\n      return (\n        <Styled.Wrapper>\n          {this.props.currentQuestionId + 1}/{this.props.gameLenght}\n        </Styled.Wrapper>\n      );\n    }\n\n    if (!this.props.gameInProgress && this.props.gameFinished) {\n      return <Styled.Wrapper>summary</Styled.Wrapper>;\n    }\n\n    return <Styled.Wrapper>trivia</Styled.Wrapper>;\n\n  }\n}\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  currentQuestionId: state.questions.currentQuestionId,\n  gameFinished: state.game.gameFinished,\n  gameInProgress: state.game.gameInProgress,\n  gameLenght: state.game.gameLenght,\n});\n\nexport default connect(mapStateToProps, {})(Header);\n","import styled from 'styled-components'\nimport { colorTheme } from '../Common/colorVariables';\n\nexport const MenuWrapper = styled.div`\n  display: grid;\n  width: 100%;\n  height: 100%;\n  grid-template-columns: 1fr;\n  grid-template-rows: 1fr 1fr 1fr 1fr 1fr;\n`;\n\nexport const SettingWrapper = styled.div`\n  width: 100%;\n  display: grid;\n  justify-items: center;\n  align-content: center;\n`;\n\nexport const InputWrapper = styled.div`\n  position: relative;\n  width: 80%;\n  display: grid;\n  place-items: center;\n`;\n\nexport const InputWithControlsWrapper = styled(InputWrapper)`\n  grid-template-columns: 8fr 2fr;\n  height: 50%;\n  padding: 5px;\n  box-sizing: border-box;\n`;\n\nexport const GameSetting = styled.div`\n  display: grid;\n  width: 100%;\n  height: 100%;\n  place-items: center;\n  font-size: 2.5em;\n  font-weight: bold;\n  color: ${colorTheme.activeFont};\n  text-transform: uppercase;\n`\n\nexport const DifficultyButtonWrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`\n\n\n\nexport const PlayerNameInput = styled.input`\n  width: 100%;\n  height: fit-content;\n  font-size: 3em;\n  padding: 10%;\n  text-align: center;\n  background: transparent;\n  border: 3px dashed orange;\n  border-radius: 10px;\n  box-sizing: border-box;\n  color: ${props => props.theme.activeFont };\n\n  ::placeholder,\n  ::-webkit-input-placeholder {\n    font-size: 0.9em;\n    color: ${props => props.theme.inactiveFont };\n  }\n  :-ms-input-placeholder {\n    font-size: 0.9em;\n    color: ${props => props.theme.inactiveFont };\n  }\n`;\n\nexport const PreviousHighScoreDiv = styled.div`\n  position: absolute;\n  top: 0;\n  right: 0;\n  width: fit-content;\n  height: fit-content;\n  padding: 1.5%;\n  border: 3px dashed white;\n  font-size: 1.5em;\n  font-weight: bold;\n  border-radius: 10px;\n  background-color: orange;\n  color: white;\n  box-sizing: border-box;\n`\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { colorTheme } from '../Common/colorVariables';\n\nimport { ThunkDispatch } from 'redux-thunk';\nimport actions from '../../store/actions';\nimport { Difficulty, GameLenght, QuestionsType } from '../../store/game/state';\nimport { RootState } from '../../store/rootState';\nimport Button from '../Common/Button/Button.component';\nimport * as Styled from './Menu.styled';\n\ntype DispatchProps = {\n  setDifficulty: (difficulty: Difficulty) => void;\n  setGameLenght: (gameLenght: GameLenght) => void;\n  setQuestionsType: (questionsType: QuestionsType) => void;\n  setPlayerName: (playerName: string) => void;\n  startGame: () => void;\n  getQuestions: () => void;\n};\n\ntype StateProps = {\n  playerName: string,\n  difficulty: Difficulty,\n  gameLenght: GameLenght,\n  toBeatScore: number,\n  questionsType: QuestionsType\n};\n\ntype IState = {\n};\ntype IProps = {};\n\ntype Props = DispatchProps & StateProps & IProps;\n\nclass Menu extends Component<Props, IState> {\n\n  state: IState = {\n    playerName: ''\n  };\n\n  playerNameInputHandler = (e: React.FormEvent<HTMLInputElement>): void => {\n    this.props.setPlayerName(e.currentTarget.value);\n  }\n\n  difficultyHandler = (changeTo: 'Harder' | 'Easier') => () => {\n    const difficulty = this.props.difficulty;\n\n    if (changeTo === 'Harder') {\n      if (difficulty === Difficulty.EASY) {\n        return this.props.setDifficulty(Difficulty.MEDIUM);\n      }\n      if (difficulty === Difficulty.MEDIUM) {\n        return this.props.setDifficulty(Difficulty.HARD);\n      }\n      return null;\n    }\n\n    if (difficulty === Difficulty.HARD) {\n      return this.props.setDifficulty(Difficulty.MEDIUM);\n    }\n    if (difficulty === Difficulty.MEDIUM) {\n      return this.props.setDifficulty(Difficulty.EASY);\n    }\n    return null;\n  }\n\n  gameLenghtHandler = (changeTo: 'Longer' | 'Shorter') => () => {\n    const gameLenght = this.props.gameLenght;\n\n    if (changeTo === 'Longer') {\n      if (gameLenght === GameLenght.AVERAGE) {\n        return this.props.setGameLenght(GameLenght.LONG);\n      }\n      if (gameLenght === GameLenght.SHORT) {\n        return this.props.setGameLenght(GameLenght.AVERAGE);\n      }\n      return null;\n    }\n    if (gameLenght === GameLenght.LONG) {\n      return this.props.setGameLenght(GameLenght.AVERAGE);\n    }\n    if (gameLenght === GameLenght.AVERAGE) {\n      return this.props.setGameLenght(GameLenght.SHORT);\n    }\n    return null;\n  }\n\n  questionsTypeHandler = (changeTo: 'Simple' | 'Complex') => () => {\n\n    if (changeTo === 'Complex') {\n      return this.props.setQuestionsType(QuestionsType.MULTI);\n    }\n    return this.props.setQuestionsType(QuestionsType.SINGLE);\n\n  }\n\n  startGame = () => {\n    this.props.getQuestions();\n    this.props.setPlayerName(this.props.playerName);\n    this.props.startGame();\n  }\n\n  render() {\n    const { difficulty, playerName, gameLenght, questionsType, toBeatScore } = this.props;\n    return (\n      <Styled.MenuWrapper>\n        <Styled.SettingWrapper>\n          <Styled.InputWrapper>\n            <Styled.PlayerNameInput\n              theme={colorTheme}\n              value={playerName}\n              placeholder={'New player'}\n              type={'text'}\n              onChange={this.playerNameInputHandler}\n            />\n            <Styled.PreviousHighScoreDiv>\n              To beat: {toBeatScore.toFixed(1)}%\n            </Styled.PreviousHighScoreDiv>\n          </Styled.InputWrapper>\n        </Styled.SettingWrapper>\n        <Styled.SettingWrapper>\n          <Styled.InputWithControlsWrapper>\n            <Styled.GameSetting>\n              {difficulty}\n            </Styled.GameSetting>\n            <Styled.DifficultyButtonWrapper>\n              <Button\n                onButtonClick={this.difficultyHandler('Harder')}\n                disabled={this.props.difficulty === Difficulty.HARD}\n              >\n                +\n              </Button>\n              <Button\n                onButtonClick={this.difficultyHandler('Easier')}\n                disabled={this.props.difficulty === Difficulty.EASY}\n              >\n                -\n              </Button>\n            </Styled.DifficultyButtonWrapper>\n          </Styled.InputWithControlsWrapper>\n        </Styled.SettingWrapper>\n        <Styled.SettingWrapper>\n          <Styled.InputWithControlsWrapper>\n            <Styled.GameSetting>\n              {questionsType}\n            </Styled.GameSetting>\n            <Styled.DifficultyButtonWrapper>\n              <Button\n                onButtonClick={this.questionsTypeHandler('Complex')}\n                disabled={this.props.questionsType === QuestionsType.MULTI}\n              >\n                +\n              </Button>\n              <Button\n                onButtonClick={this.questionsTypeHandler('Simple')}\n                disabled={this.props.questionsType === QuestionsType.SINGLE}\n              >\n                -\n              </Button>\n            </Styled.DifficultyButtonWrapper>\n          </Styled.InputWithControlsWrapper>\n        </Styled.SettingWrapper>\n        <Styled.SettingWrapper>\n          <Styled.InputWithControlsWrapper>\n            <Styled.GameSetting>\n              {gameLenght}\n            </Styled.GameSetting>\n            <Styled.DifficultyButtonWrapper>\n              <Button\n                onButtonClick={this.gameLenghtHandler('Longer')}\n                disabled={this.props.gameLenght === GameLenght.LONG}\n              >\n                +\n              </Button>\n              <Button\n                onButtonClick={this.gameLenghtHandler('Shorter')}\n                disabled={this.props.gameLenght === GameLenght.SHORT}\n              >\n                -\n              </Button>\n            </Styled.DifficultyButtonWrapper>\n          </Styled.InputWithControlsWrapper>\n        </Styled.SettingWrapper>\n        <Styled.SettingWrapper>\n          <Styled.InputWrapper>\n            <Button\n              action={true}\n              onButtonClick={this.startGame}\n              disabled={this.props.playerName.length ? false : true}\n            >\n              start\n            </Button>\n          </Styled.InputWrapper>\n        </Styled.SettingWrapper>\n      </Styled.MenuWrapper>\n    );\n\n  }\n}\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  difficulty: state.game.difficulty,\n  gameLenght: state.game.gameLenght,\n  playerName: state.game.playerName,\n  questionsType: state.game.questionsType,\n  toBeatScore: state.game.highScore,\n});\n\n// tslint:disable-next-line:no-any\nconst mapDispatchToProps = (dispatch: ThunkDispatch<{}, {}, any>): DispatchProps => ({\n  getQuestions: () => dispatch(actions.question.getQuestsions()),\n  setDifficulty: (difficulty: Difficulty) => dispatch(actions.game.setDifficulty(difficulty)),\n  setGameLenght: (gameLenght: GameLenght) => dispatch(actions.game.setGameLenght(gameLenght)),\n  setPlayerName: (playerName: string) => dispatch(actions.game.setPlayerName(playerName)),\n  setQuestionsType: (questionsType: QuestionsType) => dispatch(actions.game.setQuestionsType(questionsType)),\n  startGame: () => dispatch(actions.game.startGame()),\n});\n\nexport default connect<StateProps, DispatchProps, IProps, RootState>(mapStateToProps, mapDispatchToProps)(Menu);\n","import styled from 'styled-components';\nimport { colorTheme } from '../Common/colorVariables';\n\nexport const SummaryWrapper = styled.div`\n  display: grid;\n  width: 100%;\n  padding: 5px;\n  grid-template-rows: auto;\n  box-sizing: border-box;\n`\n\nexport const ScoreWrapper = styled.div`\n  display: grid;\n  padding: 10px;\n  font-size: 2em;\n  font-weight: bold;\n  place-items: center;\n  border-top: 2px dashed gray;\n  box-sizing: border-box;\n`\n\nexport const ScoreDiv = styled.div`\n  color: ${colorTheme.activeFont};\n  text-align: center;\n`\nexport const ScoreSpan = styled.span`\n  color: ${colorTheme.activeFont};\n  text-align: center;\n`\nexport const QuestionWrapper = styled.div`\n  display: grid;\n  width: 100%;\n  height: 100%;\n  grid-template-columns: 10% 90%;\n  text-align: center;\n  border-bottom: 2px dashed gray;\n\n  :last-child {\n    border-bottom: none;\n  }\n`\n\nexport const QuestionsWrapper = styled.div`\n  display: grid;\n  grid-template-rows: auto;\n  grid-row-gap: 2%;\n  overflow: auto;\n`\n\nexport const Answer = styled.div`\n  display: grid;\n  justify-content: center;\n  place-items: center;\n  font-size: 10px;\n`\n\nexport const Question = styled.div`\n  display: grid;\n  grid-template-rows: auto;\n  grid-row-gap: 10%;\n  font-size: 1em;\n  color: ${colorTheme.activeFont};\n`\n\nexport const AnswerText = styled.div`\n  font-weight: bold;\n  color: ${colorTheme.activeFont};\n  box-sizing: border-box;\n  margin-bottom: 10px;\n`","import he from 'he';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport actions from '../../store/actions';\nimport { Question } from '../../store/questions/state';\nimport { RootState } from '../../store/rootState';\nimport Button from '../Common/Button/Button.component';\nimport * as Styled from './Summary.styled';\ntype DispatchProps = {\n  setNewGame: () => void;\n  setQuestionsArray: (array: Question[]) => void;\n};\n\ntype StateProps = {\n  score: number;\n  questionsArray: Question[];\n};\n\ntype IState = {};\ntype IProps = {};\n\ntype Props = DispatchProps & StateProps & IProps;\n\nclass Summary extends Component<Props, IState> {\n  loadNewGame = () => {\n    this.props.setQuestionsArray([]);\n    this.props.setNewGame();\n  }\n\n  render() {\n    const { questionsArray } = { ...this.props };\n    return (\n      <Styled.SummaryWrapper>\n          <Styled.QuestionsWrapper>\n            {questionsArray.map(question => {\n              if (question.userAnswer === question.correctAnswer) {\n                return (\n                  <Styled.QuestionWrapper key={question.id}>\n                    <Styled.Answer>{he.decode('&#9989;')}</Styled.Answer>\n                    <Styled.Question>\n                      {he.decode(question.question)}\n                      <Styled.AnswerText>{he.decode(question.correctAnswer.toUpperCase())}</Styled.AnswerText>\n                    </Styled.Question>\n                  </Styled.QuestionWrapper>\n                );\n              }\n              return (\n                <Styled.QuestionWrapper key={question.id}>\n                  <Styled.Answer>{he.decode('&#10060;')}</Styled.Answer>\n                  <Styled.Question>\n                    {he.decode(question.question)}\n                    <Styled.AnswerText>{he.decode(question.correctAnswer.toUpperCase())}</Styled.AnswerText>\n                  </Styled.Question>\n                </Styled.QuestionWrapper>\n              );\n            })}\n          </Styled.QuestionsWrapper>\n        <Styled.ScoreWrapper>\n          <Styled.ScoreDiv>\n            <Styled.ScoreSpan>Your score was: </Styled.ScoreSpan>\n            {((this.props.score / (this.props.questionsArray.length)) * 100).toFixed(1)}%\n          </Styled.ScoreDiv>\n        </Styled.ScoreWrapper>\n        <Button action={true} onButtonClick={this.loadNewGame}>\n          new game\n        </Button>\n      </Styled.SummaryWrapper>\n    );\n  }\n}\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  questionsArray: state.questions.questionsArray,\n  score: state.game.score,\n});\n\n// tslint:disable-next-line:no-any\nconst mapDispatchToProps = (dispatch: ThunkDispatch<{}, {}, any>): DispatchProps => ({\n  setNewGame: () => dispatch(actions.game.setNewGame()),\n  setQuestionsArray: array => dispatch(actions.question.setQuestionsArray(array))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Summary);\n","import React, { Component } from 'react';\nimport * as Styled from './Layout.styled';\n// import { IProps, IState } from './Layout.types';\n\nimport { connect } from 'react-redux';\nimport { RootState } from '../../store/rootState';\nimport Game from '../Game/Game.component';\nimport Header from '../Header/Header.component';\nimport Menu from '../Menu/Menu.component';\nimport SummaryComponent from '../Summary/Summary.component';\n\ntype IProps = {\n  gameInProgress: boolean,\n  gameFinished: boolean,\n  isLoading: boolean,\n};\ntype IState = {};\n\nclass Layout extends Component<IProps, IState> {\n\n  render() {\n\n    if (this.props.gameInProgress) {\n      return (\n        <Styled.LayoutWrapper>\n          <Styled.Wrapper>\n            <Header/>\n            <Game />\n          </Styled.Wrapper>\n        </Styled.LayoutWrapper>\n      );\n    }\n\n    if (!this.props.gameInProgress && this.props.gameFinished) {\n      return (\n        <Styled.LayoutWrapper>\n          <Styled.Wrapper>\n            <Header/>\n            <SummaryComponent/>\n          </Styled.Wrapper>\n        </Styled.LayoutWrapper>\n      );\n    }\n\n    return (\n      <Styled.LayoutWrapper>\n        <Styled.Wrapper>\n          <Header/>\n          <Menu/>\n        </Styled.Wrapper>\n      </Styled.LayoutWrapper>\n    );\n  }\n}\n\nconst mapStateToProps = (state: RootState): IProps => ({\n  gameFinished: state.game.gameFinished,\n  gameInProgress: state.game.gameInProgress,\n  isLoading: state.questions.isLoading,\n});\n\nexport default connect(mapStateToProps, {})(Layout);\n","import * as actionTypes from './actionTypes';\nimport { GameState, initialState } from './state';\n\nconst gameStartRequested = (state: GameState): GameState => ({\n  ...state,\n  isLoading: true,\n});\n\nconst gameStartCompleted = (state: GameState): GameState => ({\n  ...state,\n  isLoading: false,\n});\n\nconst startGame = (state: GameState): GameState => ({\n  ...state,\n  gameFinished: false,\n  gameInProgress: true,\n  score: 0,\n});\n\nconst finishGame = (state: GameState): GameState => ({\n  ...state,\n  gameFinished: true,\n  gameInProgress: false,\n});\n\nconst setGameLenght = (state: GameState, action: actionTypes.SetGameLenght): GameState => ({\n  ...state,\n  gameLenght: action.gameLenght\n});\n\nconst setDifficulty = (state: GameState, action: actionTypes.SetDifficulty): GameState => ({\n  ...state,\n  difficulty: action.difficulty\n});\n\nconst setQuestionsType = (state: GameState, action: actionTypes.SetQuestionsType): GameState => ({\n  ...state,\n  questionsType: action.questionsType\n});\n\nconst setPlayerName = (state: GameState, action: actionTypes.SetPlayerName): GameState => ({\n  ...state,\n  playerName: action.playerName\n});\n\nconst addPoint = (state: GameState): GameState => ({\n  ...state,\n  score: state.score + 1\n});\n\nconst setNewGame = (state: GameState): GameState => ({\n  ...state,\n  gameFinished: false,\n  gameInProgress: false,\n  score: 0,\n});\n\nconst setHighScore = (state: GameState, action: actionTypes.SetHighScore): GameState => ({\n  ...state,\n  highScore: action.highScore,\n});\n\nconst gameReducer = (state = initialState, action: actionTypes.GameAction) => {\n  switch (action.type) {\n    case 'game/SetHighScore': return setHighScore(state, action);\n    case '@game/SetNewGame': return setNewGame(state);\n    case '@game/StartGame': return startGame(state);\n    case '@game/FinishGame': return finishGame(state);\n    case '@game/GameStartRequested': return gameStartRequested(state);\n    case '@game/GameStartCompleted': return gameStartCompleted(state);\n    case '@game/SetGameLenght': return setGameLenght(state, action);\n    case '@game/SetQuestionsType': return setQuestionsType(state, action);\n    case '@game/SetDifficulty': return setDifficulty(state, action);\n    case '@game/SetPlayerName': return setPlayerName(state, action);\n    case '@game/AddPoint': return addPoint(state);\n    default: return state;\n  }\n};\n\nexport default gameReducer;\n","import { Difficulty, QuestionsType } from '../game/state';\n\nexport type Question = {\n  id: number;\n  category: string;\n  type: QuestionsType;\n  difficulty: Difficulty;\n  question: string;\n  correctAnswer: string;\n  incorrectAnswers: string[];\n  userAnswer: string;\n};\n\nexport type IQuestion = {\n  id: number;\n  category: string;\n  type: QuestionsType;\n  difficulty: Difficulty;\n  question: string;\n  correct_answer: string;\n  incorrect_answers: string[];\n};\n\nexport interface QuestionsState {\n  questionsArray: Question[];\n  currentQuestionId: number;\n  isLoading: boolean;\n}\n\nexport const initialState: QuestionsState = {\n  currentQuestionId: 0,\n  isLoading: false,\n  questionsArray: [],\n};\n","import * as actionTypes from './actionTypes';\nimport { initialState, QuestionsState } from './state';\n\nconst getQuestionsRequested = (state: QuestionsState): QuestionsState => ({\n  ...state,\n  isLoading: true,\n});\n\nconst getQuestionsFailed = (state: QuestionsState): QuestionsState => ({\n  ...state,\n  isLoading: false,\n});\n\nconst getQuestionsSuccess = (state: QuestionsState): QuestionsState => ({\n  ...state,\n  isLoading: false,\n});\n\nconst setQuestionsArray = (state: QuestionsState, action: actionTypes.SetQuestionsArray): QuestionsState => ({\n  ...state,\n  currentQuestionId: 0,\n  questionsArray: action.questionsArray\n});\n\nconst changeCurrentQuestion = (state: QuestionsState, action: actionTypes.ChangeCurrentQuestion): QuestionsState => ({\n  ...state,\n  currentQuestionId: action.currentQuestionId\n});\n\nconst answerQuestion = (state: QuestionsState, action: actionTypes.AnswerQuestion): QuestionsState => ({\n  ...state,\n  questionsArray: state.questionsArray.map(\n    (question, i) => i === action.questionId ? { ...question, userAnswer: action.answer } : question\n  )\n});\n\nconst questionReducer = (state = initialState, action: actionTypes.QuestionAction) => {\n  switch (action.type) {\n    case '@question/AnswerQuestion': return answerQuestion(state, action);\n    case '@question/GetQuestionsRequested': return getQuestionsRequested(state);\n    case '@question/GetQuestionsFailed': return getQuestionsFailed(state);\n    case '@question/GetQuestionsSuccess': return getQuestionsSuccess(state);\n    case '@question/SetQuestionsArray': return setQuestionsArray(state, action);\n    case '@question/ChangeCurrentQuestion': return changeCurrentQuestion(state, action);\n    default: return state;\n  }\n};\n\nexport default questionReducer;\n","import { combineReducers } from 'redux';\nimport game from './game/reducer';\nimport questions from './questions/reducer';\n\nconst rootReducer = combineReducers({\n  game,\n  questions\n});\n\nexport default rootReducer;\n","import React from 'react';\n\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, compose, createStore } from 'redux';\n\nimport thunk from 'redux-thunk';\nimport Layout from './modules/Layout/Layout.component';\nimport rootReducer from './store/rootReducer';\n\n// tslint:disable-next-line:no-any\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk)\n  ));\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <Layout/>\n    </Provider>\n  );\n};\n\nexport default App;\n","import React, { Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Normalize } from 'styled-normalize';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  (\n  <Fragment>\n    <Normalize/>\n    <App />\n  </Fragment>\n  ),\n  document.getElementById('root')\n);\n"],"sourceRoot":""}