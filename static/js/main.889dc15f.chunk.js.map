{"version":3,"sources":["modules/Layout/Layout.styled.js","store/game/state.ts","store/game/actions.ts","store/questions/actions.ts","store/actions.ts","modules/common/colorVariables.js","modules/common/Button/Button.styled.js","modules/common/Button/Button.component.tsx","modules/common/Loader/Loader.styled.js","modules/common/Loader/Loader.tsx","modules/Question/Question.styled.js","modules/Question/Question.component.tsx","modules/Game/Game.styled.js","modules/Game/Game.component.tsx","modules/Header/Header.styled.js","modules/Header/Header.component.tsx","modules/Menu/Menu.styled.js","modules/Menu/Menu.component.tsx","modules/Summary/Summary.styled.js","modules/Summary/Summary.component.tsx","modules/Layout/Layout.component.tsx","store/game/reducer.ts","store/questions/state.ts","store/questions/reducer.ts","store/rootReducer.ts","App.tsx","index.tsx"],"names":["Difficulty","QuestionsType","GameLenght","Wrapper","styled","div","_templateObject","LayoutWrapper","_templateObject2","ErrorWrapper","_templateObject3","ErrorMsg","_templateObject4","initialState","difficulty","EASY","gameFinished","gameInProgress","gameLenght","SHORT","highScore","isLoading","playerName","questionsType","SINGLE","score","setType","type","setDifficulty","setLenght","setPlayerName","addPoint","finishGame","startGame","setNewGame","setHighScore","quitGameLoad","setGameDifficulty","newDiff","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","getState","state","wrap","_context","prev","next","game","MEDIUM","HARD","abrupt","stop","_x","_x2","apply","this","arguments","setGameLenght","newLenght","_ref2","_callee2","_context2","AVERAGE","LONG","_x3","_x4","setQuestionsType","newType","_ref3","_callee3","_context3","MULTI","_x5","setQuestionsArray","questionsArray","changeCurrentQuestion","currentQuestionId","answerQuestion","questionId","answer","clearQuestionRequest","getQuestsions","questionsUrl","questions","concat","axios","get","sent","data","response_code","results","map","el","index","push","category","correctAnswer","correct_answer","id","incorrectAnswers","incorrect_answers","question","userAnswer","t0","actions","gameActions","questionActions","colorTheme","activeFont","disabledBackground","inactiveFont","Button","button","Button_styled_templateObject","ActionButton","Button_styled_templateObject2","props","isActionButton","react_default","createElement","disabled","onClick","buttonHandler","children","Button_styled_Button","defaultProps","LoaderWrapper","Loader_styled_templateObject","LoaderBubble","Loader_styled_templateObject2","Loader","QuestionWrapper","Question_styled_templateObject","QuestionComponent","he","decode","GameWrapper","Game_styled_templateObject","LoadingWrapper","Game_styled_templateObject2","CategoryWrapper","Game_styled_templateObject3","AnswerButtonWrapper","Game_styled_templateObject4","connect","getQuestions","length","checkHighScore","_props","objectSpread","answersArr","currentQuestion","sort","b","Math","random","prepareAnswers","Question_component","Button_component","key","common_Loader_Loader","Header_styled_templateObject","questionsLoadFailed","Header_styled_Wrapper","MenuWrapper","Menu_styled_templateObject","SettingWrapper","Menu_styled_templateObject2","InputWrapper","Menu_styled_templateObject3","InputWithControlsWrapper","Menu_styled_templateObject4","GameSetting","_templateObject5","DifficultyButtonWrapper","_templateObject6","PlayerNameInput","input","_templateObject7","theme","PreviousHighScoreDiv","_templateObject8","toBeatScore","difficultyHandler","gameLenghtHandler","questionTypesHandler","value","placeholder","onChange","e","currentTarget","toFixed","SummaryWrapper","Summary_styled_templateObject","ScoreWrapper","Summary_styled_templateObject2","ScoreDiv","Summary_styled_templateObject3","ScoreSpan","span","Summary_styled_templateObject4","Summary_styled_templateObject5","QuestionsWrapper","Summary_styled_templateObject6","Answer","Summary_styled_templateObject7","Question","Summary_styled_templateObject8","AnswerText","_templateObject9","array","Summary_styled_QuestionWrapper","toUpperCase","clearQuestionsRequest","Header_component","Game_component","Summary_component","Menu_component","gameReducer","undefined","action","gameStartRequested","gameStartCompleted","questionReducer","i","getQuestionsRequested","getQuestionsFailed","getQuestionsSuccess","rootReducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","App","es","Layout_component","ReactDOM","render","react","dist","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.889dc15f.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: grid;\n  width: 375px;\n  height: 812px;\n  box-sizing: border-box;\n  border: 2px dashed gray;\n  border-radius: 5px;\n  grid-template-rows: 10% 90%;\n`\n\nexport const LayoutWrapper = styled.div`\n  display: grid;\n  width: 100%;\n  height: 100%;\n  justify-content: center;\n`\n\nexport const ErrorWrapper = styled.div`\n  display: grid;\n  width: 100%;\n  height: 100%;\n  justify-content: center;\n  grid-template-rows: 90% 10%;\n`\n\nexport const ErrorMsg = styled.div`\n  display: grid;\n  color: red;\n  font-size: 2.5em;\n  place-items: center;\n  text-align: center;\n`","export enum Difficulty {\n  EASY = 'easy',\n  MEDIUM = 'medium',\n  HARD = 'hard'\n}\n\nexport enum QuestionsType {\n  SINGLE = 'boolean',\n  MULTI = 'multiple'\n}\n\nexport enum GameLenght {\n  SHORT = 5,\n  AVERAGE = 10,\n  LONG = 15\n}\n\nexport interface GameState {\n  isLoading: boolean;\n  gameInProgress: boolean;\n  gameFinished: boolean;\n  playerName: string;\n  difficulty: Difficulty;\n  gameLenght: GameLenght;\n  score: number;\n  questionsType: QuestionsType;\n  highScore: number;\n}\n\nexport const initialState: GameState = {\n  difficulty: Difficulty.EASY,\n  gameFinished: false,\n  gameInProgress: false,\n  gameLenght: GameLenght.SHORT,\n  highScore: 0,\n  isLoading: false,\n  playerName: '',\n  questionsType: QuestionsType.SINGLE,\n  score: 0,\n};\n","import { Dispatch } from 'react';\nimport { RootState } from '../rootState';\nimport * as actionTypes from './actionTypes';\nimport { Difficulty, GameLenght, QuestionsType } from './state';\n\nexport const setType = (questionsType: QuestionsType): actionTypes.SetType => ({\n  questionsType,\n  type: '@game/SetType',\n});\n\nexport const setDifficulty = (difficulty: Difficulty): actionTypes.SetDifficulty => ({\n  difficulty,\n  type: '@game/SetDifficulty',\n});\n\nexport const setLenght = (gameLenght: GameLenght): actionTypes.SetLenght => ({\n  gameLenght,\n  type: '@game/SetLenght',\n});\n\nexport const setPlayerName = (playerName: string): actionTypes.SetPlayerName => ({\n  playerName,\n  type: '@game/SetPlayerName',\n});\n\nexport const addPoint = (): actionTypes.AddPoint => ({\n  type: '@game/AddPoint'\n});\n\nexport const finishGame = (): actionTypes.FinishGame => ({\n  type: '@game/FinishGame'\n});\n\nexport const startGame = (): actionTypes.StartGame => ({\n  type: '@game/StartGame'\n});\n\nexport const setNewGame = (): actionTypes.SetNewGame => ({\n  type: '@game/SetNewGame'\n});\n\nexport const setHighScore = (highScore: number): actionTypes.SetHighScore => ({\n  highScore,\n  type: '@game/SetHighScore'\n});\n\nexport const quitGameLoad = (): actionTypes.QuitGameLoad => ({\n  type: '@game/QuitGameLoad'\n});\n\nexport const setGameDifficulty = (newDiff: 'Harder' | 'Easier') => {\n  return async (dispatch: Dispatch<actionTypes.GameAction>, getState: () => RootState) => {\n    const state = getState();\n\n    const difficulty = state.game.difficulty;\n\n    if (newDiff === 'Harder') {\n      if (difficulty === Difficulty.EASY) {\n        dispatch(setDifficulty(Difficulty.MEDIUM));\n      }\n      if (difficulty === Difficulty.MEDIUM) {\n        dispatch(setDifficulty(Difficulty.HARD));\n      }\n      return null;\n    }\n\n    if (difficulty === Difficulty.HARD) {\n      dispatch(setDifficulty(Difficulty.MEDIUM));\n    }\n    if (difficulty === Difficulty.MEDIUM) {\n      dispatch(setDifficulty(Difficulty.EASY));\n    }\n    return null;\n  };\n};\n\nexport const setGameLenght = (newLenght: 'Longer' | 'Shorter') => {\n  return async (dispatch: Dispatch<actionTypes.GameAction>, getState: () => RootState) => {\n    const state = getState();\n\n    const gameLenght = state.game.gameLenght;\n\n    if (newLenght === 'Longer') {\n      if (gameLenght === GameLenght.AVERAGE) {\n        dispatch(setLenght(GameLenght.LONG));\n      }\n      if (gameLenght === GameLenght.SHORT) {\n        dispatch(setLenght(GameLenght.AVERAGE));\n      }\n      return null;\n    }\n    if (gameLenght === GameLenght.LONG) {\n      dispatch(setLenght(GameLenght.AVERAGE));\n    }\n    if (gameLenght === GameLenght.AVERAGE) {\n      dispatch(setLenght(GameLenght.SHORT));\n    }\n    return null;\n  };\n};\n\nexport const setQuestionsType = (newType: 'Simple' | 'Complex') => {\n  return async (dispatch: Dispatch<actionTypes.GameAction>) => {\n\n    if (newType === 'Complex') {\n      return dispatch(setType(QuestionsType.MULTI));\n    }\n    dispatch(setType(QuestionsType.SINGLE));\n  };\n};\n","import axios from 'axios';\nimport { Dispatch } from 'react';\nimport { RootState } from '../rootState';\nimport * as actionTypes from './actionTypes';\nimport { IQuestion, Question } from './state';\n\nconst getQuestionsRequested = (): actionTypes.GetQuestionsRequested => ({\n  type: '@question/GetQuestionsRequested'\n});\n\nconst getQuestionsFailed = (): actionTypes.GetQuestionsFailed => ({\n  type: '@question/GetQuestionsFailed'\n});\n\nconst getQuestionsSuccess = (): actionTypes.GetQuestionsSuccess => ({\n  type: '@question/GetQuestionsSuccess'\n});\n\nexport const setQuestionsArray = (questionsArray: Question[]): actionTypes.SetQuestionsArray => ({\n  questionsArray,\n  type: '@question/SetQuestionsArray'\n});\n\nexport const changeCurrentQuestion = (currentQuestionId: number): actionTypes.ChangeCurrentQuestion => ({\n  currentQuestionId,\n  type: '@question/ChangeCurrentQuestion'\n});\n\nexport const answerQuestion = (questionId: number, answer: string): actionTypes.AnswerQuestion => ({\n  answer,\n  questionId,\n  type: '@question/AnswerQuestion',\n});\n\nexport const clearQuestionRequest = (): actionTypes.ClearQuestionRequest => ({\n  type: '@question/ClearQuestionRequest'\n});\n\nexport const getQuestsions = () => {\n  return async (dispatch: Dispatch<actionTypes.QuestionAction>, getState: () => RootState) => {\n    dispatch(getQuestionsRequested());\n    const state = getState();\n    try {\n      const baseUrl = 'https://opentdb.com/api.php?';\n      const difficulty = state.game.difficulty;\n      const gameLenght = state.game.gameLenght;\n      const questionsType = state.game.questionsType;\n      const questionsUrl = baseUrl.concat(`amount=${gameLenght}&difficulty=${difficulty}&type=${questionsType}`);\n\n      const questions = await axios.get(questionsUrl);\n      if (questions.data.response_code !== 0) {\n        return dispatch(getQuestionsFailed());\n      }\n\n      const questionsArray: Question[] = [];\n      questions.data.results.map((el: IQuestion, index: number) => {\n        questionsArray.push({\n          category: el.category,\n          correctAnswer: el.correct_answer,\n          difficulty: el.difficulty,\n          id: index,\n          incorrectAnswers: el.incorrect_answers,\n          question: el.question,\n          type: el.type,\n          userAnswer: '',\n        });\n      });\n      dispatch(setQuestionsArray(questionsArray));\n      dispatch(getQuestionsSuccess());\n    } catch (err) {\n      dispatch(getQuestionsFailed());\n    }\n  };\n};\n","import * as gameActions from './game/actions';\nimport * as questionActions from './questions/actions';\n\nconst actions = {\n  game: gameActions,\n  question: questionActions,\n};\n\nexport default actions;\n","export const colorTheme = {\n  activeFont: `rgba(75, 75, 75, 1)`,\n  disabledBackground: `#bbb`,\n  inactiveFont: `rgba(132, 132, 132, 0.75)`\n};","import styled from 'styled-components';\nimport { colorTheme } from '../colorVariables';\n\nexport const Button = styled.button`\n  display: grid;\n  width: 100%;\n  height: 100%;\n  align-items: center;\n  padding: 5px;\n  border: 2px dashed white;\n  background-color: orange;\n  border-radius: 10px;\n  color: white;\n  font-size: 25px;\n  font-weight: bold;\n  justify-self: center;\n  text-transform: uppercase;\n\n  &:disabled,\n  &--disabled {\n    background-color: ${colorTheme.disabledBackground};\n    color: ${colorTheme.inactiveFont};\n    pointer-events: none;\n  }\n`\n\nexport const ActionButton = styled(Button)`\n  height: 70px;\n`\n\n","import React, { ReactNode } from 'react';\nimport * as Styled from './Button.styled';\n\ntype IProps = {\n  children?: ReactNode;\n  disabled?: boolean;\n  buttonHandler: () => void;\n  isActionButton?: boolean;\n};\n\nconst Button: React.SFC<IProps> = props => {\n\n  if (props.isActionButton) {\n    return (\n      <Styled.ActionButton\n        disabled={props.disabled}\n        onClick={props.buttonHandler}\n      >\n        {props.children}\n      </Styled.ActionButton>\n    );\n  }\n\n  return (\n    <Styled.Button\n      disabled={props.disabled}\n      onClick={props.buttonHandler}\n    >\n      {props.children}\n    </Styled.Button>\n  );\n};\n\nButton.defaultProps = {\n  disabled: false\n};\n\nexport default Button;\n","import styled from 'styled-components';\n\nexport const LoaderWrapper = styled.div`\n  position: relative;\n  display: inline-block;\n  width: 64px;\n  height: 40px;\n  margin: 0 auto;\n`\n\nexport const LoaderBubble = styled.div`\n  position: absolute;\n  top: 20px;\n  width: 11px;\n  height: 11px;\n  animation-timing-function: cubic-bezier(0, 1, 1, 0);\n  background: #424242;\n  border-radius: 50%;\n\n  :nth-child(1) {\n    left: 6px;\n    animation: loaderEllipsisAppear 0.6s infinite;\n  }\n\n  :nth-child(2) {\n    left: 6px;\n    animation: loaderEllipsisMove 0.6s infinite;\n  }\n\n  :nth-child(3) {\n    left: 26px;\n    animation: loaderEllipsisMove 0.6s infinite;\n  }\n\n  :nth-child(4) {\n    left: 45px;\n    animation: loaderEllipsisDisappear 0.6s infinite;\n  }\n\n  @keyframes loaderEllipsisAppear {\n    0% {\n      transform: scale(0);\n    }\n\n    100% {\n      transform: scale(1);\n    }\n  }\n\n  @keyframes loaderEllipsisDisappear {\n    0% {\n      transform: scale(1);\n    }\n\n    100% {\n      transform: scale(0);\n    }\n  }\n\n  @keyframes loaderEllipsisMove {\n    0% {\n      transform: translate(0, 0);\n    }\n\n    100% {\n      transform: translate(19px, 0);\n    }\n  }\n`\n\n\n\n\n\n","import React from 'react';\nimport * as Styled from './Loader.styled';\n\nconst Loader = () => {\n  return (\n    <Styled.LoaderWrapper>\n      <Styled.LoaderBubble />\n      <Styled.LoaderBubble />\n      <Styled.LoaderBubble />\n      <Styled.LoaderBubble />\n    </Styled.LoaderWrapper>\n  );\n};\n\nexport default Loader;\n","import styled from 'styled-components';\nimport { colorTheme } from '../common/colorVariables';\n\nexport const QuestionWrapper = styled.div`\n  display: grid;\n  color: ${colorTheme.activeFont};\n  font-size: 2em;\n  place-items: center;\n  text-align: center;\n`;\n","import he from 'he';\nimport React from 'react';\nimport * as Styled from './Question.styled';\n\ntype IProps = {\n  question: string;\n};\n\nconst QuestionComponent: React.SFC<IProps> = props => {\n\n  return (\n    <Styled.QuestionWrapper>\n      {he.decode(props.question)}\n    </Styled.QuestionWrapper>\n  );\n};\n\nQuestionComponent.defaultProps = {\n  question: '',\n};\n\nexport default QuestionComponent;\n","import styled from 'styled-components';\nimport { colorTheme } from '../common/colorVariables';\n\nexport const GameWrapper = styled.div`\n  display: grid;\n  width: 100%;\n  height: 100%;\n  box-sizing: border-box;\n  align-items: center;\n  padding: 5%;\n  grid-template-rows: 10% 45% 45%;\n`\n\nexport const LoadingWrapper = styled(GameWrapper)`\n  grid-template-rows: 1fr;\n`\nexport const CategoryWrapper = styled.div`\n  color: ${colorTheme.activeFont};\n  font-size: 1.5em;\n  font-style: italic;\n  text-align: center;\n  text-transform: uppercase;\n`\n\nexport const AnswerButtonWrapper = styled.div`\n  display: grid;\n  width: 100%;\n  height: 100%;\n  box-sizing: border-box;\n  grid-row-gap: 10px;\n  place-items: center;\n`","import he from 'he';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport actions from '../../store/actions';\nimport { Question } from '../../store/questions/state';\nimport { RootState } from '../../store/rootState';\nimport Button from '../common/Button/Button.component';\nimport Loader from '../common/Loader/Loader';\nimport QuestionComponent from '../Question/Question.component';\nimport * as Styled from './Game.styled';\n\ntype DispatchProps = {\n  getQuestions: () => void;\n  addPoint: () => void;\n  changeCurrentQuestion: (questionId: number) => void;\n  finishGame: () => void;\n  answerQuestion: (questionId: number, answer: string) => void;\n  setHighScore: (score: number) => void;\n};\n\ntype StateProps = {\n  questionsArray: Question[];\n  isLoading: boolean\n  currentQuestionId: number;\n  score: number;\n  highScore: number;\n};\n\ntype IProps = {};\n\ntype Props = DispatchProps & StateProps & IProps;\n\nconst Game: React.SFC<Props> = props => {\n\n  const answerQuestion = (questionId: number, answer: string) => () => {\n    props.answerQuestion(questionId, answer);\n    const correctAnswer = props.questionsArray[props.currentQuestionId].correctAnswer;\n    if (answer === correctAnswer) {\n      props.addPoint();\n    }\n    if (props.questionsArray.length === props.currentQuestionId + 1) {\n      checkHighScore();\n      props.finishGame();\n    }\n    props.changeCurrentQuestion(props.currentQuestionId + 1);\n  };\n\n  const checkHighScore = () => {\n    const score = ((props.score / (props.questionsArray.length)) * 100);\n    if (score > props.highScore) {\n      props.setHighScore(score);\n    }\n  };\n\n  const prepareAnswers = (currentQuestion: Question) => {\n    return currentQuestion.incorrectAnswers.concat(\n      currentQuestion.correctAnswer).sort((a, b) => 0.5 - Math.random()\n    );\n  };\n\n  const { questionsArray, currentQuestionId } = { ...props };\n  if (props.questionsArray.length > 0 && !props.isLoading) {\n    let answersArr: string[] = [];\n    const currentQuestion = questionsArray[currentQuestionId];\n    answersArr = prepareAnswers(currentQuestion);\n\n    return (\n      <Styled.GameWrapper>\n        <Styled.CategoryWrapper>\n          {currentQuestion.category}\n        </Styled.CategoryWrapper>\n        <QuestionComponent question={currentQuestion.question}/>\n        <Styled.AnswerButtonWrapper>\n          {answersArr.map(answer => {\n            return (\n              <Button\n                isActionButton={true}\n                key={answer}\n                buttonHandler={answerQuestion(currentQuestionId, answer)}\n              >\n                {he.decode(answer)}\n              </Button>\n            );\n          })}\n        </Styled.AnswerButtonWrapper>\n      </Styled.GameWrapper>\n    );\n  }\n\n  return (\n    <Styled.LoadingWrapper>\n      <Loader/>\n    </Styled.LoadingWrapper>\n  );\n};\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  currentQuestionId: state.questions.currentQuestionId,\n  highScore: state.game.highScore,\n  isLoading: state.questions.isLoading,\n  questionsArray: state.questions.questionsArray,\n  score: state.game.score,\n});\n\n// tslint:disable-next-line:no-any\nconst mapDispatchToProps = (dispatch: ThunkDispatch<{}, {}, any>): DispatchProps => ({\n  addPoint: () => dispatch(actions.game.addPoint()),\n  answerQuestion: (questionId: number, answer: string) => dispatch(actions.question.answerQuestion(questionId, answer)),\n  changeCurrentQuestion: (questionId: number) => dispatch(actions.question.changeCurrentQuestion(questionId)),\n  finishGame: () => dispatch(actions.game.finishGame()),\n  getQuestions: () => dispatch(actions.question.getQuestsions()),\n  setHighScore: (score: number) => dispatch(actions.game.setHighScore(score)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  width: 100%;\n  height: 100%;\n  box-sizing: border-box;\n  align-items: center;\n  justify-content: center;\n  padding: 5px;\n  background-color: #e3e3e3;\n  color: white;\n  font-size: 3em;\n  font-weight: bold;\n  -webkit-text-stroke: 2px orange;\n  text-transform: uppercase;\n`\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { RootState } from '../../store/rootState';\nimport * as Styled from './Header.styled';\n\ntype IProps = {};\ntype StateProps = {\n  gameInProgress: boolean;\n  currentQuestionId: number;\n  gameLenght: number;\n  gameFinished: boolean;\n  questionsLoadFailed: boolean;\n};\n\ntype Props = IProps & StateProps;\n\nconst Header: React.SFC<Props> = props => {\n\n  if (props.questionsLoadFailed) {\n    return (\n      <Styled.Wrapper>error</Styled.Wrapper>\n    );\n  }\n\n  if (props.gameInProgress) {\n    return (\n      <Styled.Wrapper>\n        {props.currentQuestionId + 1}/{props.gameLenght}\n      </Styled.Wrapper>\n    );\n  }\n\n  if (!props.gameInProgress && props.gameFinished) {\n    return <Styled.Wrapper>summary</Styled.Wrapper>;\n  }\n\n  return <Styled.Wrapper>trivia</Styled.Wrapper>;\n};\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  currentQuestionId: state.questions.currentQuestionId,\n  gameFinished: state.game.gameFinished,\n  gameInProgress: state.game.gameInProgress,\n  gameLenght: state.game.gameLenght,\n  questionsLoadFailed: state.questions.questionsLoadFailed,\n});\n\nexport default connect(mapStateToProps, {})(Header);\n","import styled from 'styled-components'\nimport { colorTheme } from '../common/colorVariables';\n\nexport const MenuWrapper = styled.div`\n  display: grid;\n  width: 100%;\n  height: 100%;\n  grid-template-columns: 1fr;\n  grid-template-rows: 1fr 1fr 1fr 1fr 1fr;\n`;\n\nexport const SettingWrapper = styled.div`\n  display: grid;\n  width: 100%;\n  align-content: center;\n  justify-items: center;\n`;\n\nexport const InputWrapper = styled.div`\n  position: relative;\n  display: grid;\n  width: 80%;\n  place-items: center;\n`;\n\nexport const InputWithControlsWrapper = styled(InputWrapper)`\n  height: 50%;\n  box-sizing: border-box;\n  padding: 5px;\n  grid-template-columns: 8fr 2fr;\n`;\n\nexport const GameSetting = styled.div`\n  display: grid;\n  width: 100%;\n  height: 100%;\n  color: ${colorTheme.activeFont};\n  font-size: 2.5em;\n  font-weight: bold;\n  place-items: center;\n  text-transform: uppercase;\n`\n\nexport const DifficultyButtonWrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`\n\nexport const PlayerNameInput = styled.input`\n  width: 100%;\n  height: fit-content;\n  box-sizing: border-box;\n  padding: 10%;\n  border: 3px dashed orange;\n  background: transparent;\n  border-radius: 10px;\n  color: ${props => props.theme.activeFont };\n  font-size: 3em;\n  text-align: center;\n\n  ::placeholder,\n  ::-webkit-input-placeholder {\n    color: ${props => props.theme.inactiveFont };\n    font-size: 0.9em;\n  }\n\n  :-ms-input-placeholder {\n    color: ${props => props.theme.inactiveFont };\n    font-size: 0.9em;\n  }\n`;\n\nexport const PreviousHighScoreDiv = styled.div`\n  position: absolute;\n  top: 0;\n  right: 0;\n  width: fit-content;\n  height: fit-content;\n  box-sizing: border-box;\n  padding: 1.5%;\n  border: 3px dashed white;\n  background-color: orange;\n  border-radius: 10px;\n  color: white;\n  font-size: 1.5em;\n  font-weight: bold;\n`\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { colorTheme } from '../common/colorVariables';\n\nimport { ThunkDispatch } from 'redux-thunk';\nimport actions from '../../store/actions';\nimport { Difficulty, GameLenght, QuestionsType } from '../../store/game/state';\nimport { RootState } from '../../store/rootState';\nimport Button from '../common/Button/Button.component';\nimport * as Styled from './Menu.styled';\n\ntype DispatchProps = {\n  difficultyHandler: (newDiff: 'Harder' | 'Easier') => () => void;\n  gameLenghtHandler: (newLenght: 'Longer' | 'Shorter') => () => void;\n  questionTypesHandler: (newType: 'Complex' | 'Simple') => () => void;\n  setPlayerName: (playerName: string) => void;\n  startGame: () => void;\n  getQuestions: () => void;\n};\n\ntype StateProps = {\n  playerName: string,\n  difficulty: Difficulty,\n  gameLenght: GameLenght,\n  toBeatScore: number,\n  questionsType: QuestionsType\n};\n\ntype IProps = {};\n\ntype Props = DispatchProps & StateProps & IProps;\n\nconst Menu: React.SFC<Props> = props => {\n  // class Menu extends Component<Props, IState> {\n\n  const playerNameInputHandler = (e: React.FormEvent<HTMLInputElement>): void => {\n    props.setPlayerName(e.currentTarget.value);\n  };\n\n  const startGame = () => {\n    props.getQuestions();\n    props.setPlayerName(props.playerName);\n    props.startGame();\n  };\n\n  const { difficulty, playerName, gameLenght, questionsType, toBeatScore } = props;\n  return (\n    <Styled.MenuWrapper>\n      <Styled.SettingWrapper>\n        <Styled.InputWrapper>\n          <Styled.PlayerNameInput\n            theme={colorTheme}\n            value={playerName}\n            placeholder={'New player'}\n            type={'text'}\n            onChange={playerNameInputHandler}\n          />\n          <Styled.PreviousHighScoreDiv>\n            To beat: {toBeatScore.toFixed(1)}%\n          </Styled.PreviousHighScoreDiv>\n        </Styled.InputWrapper>\n      </Styled.SettingWrapper>\n      <Styled.SettingWrapper>\n        <Styled.InputWithControlsWrapper>\n          <Styled.GameSetting>\n            {difficulty}\n          </Styled.GameSetting>\n          <Styled.DifficultyButtonWrapper>\n            <Button\n              buttonHandler={props.difficultyHandler('Harder')}\n              disabled={props.difficulty === Difficulty.HARD}\n            >\n              +\n            </Button>\n            <Button\n              buttonHandler={props.difficultyHandler('Easier')}\n              disabled={props.difficulty === Difficulty.EASY}\n            >\n              -\n            </Button>\n          </Styled.DifficultyButtonWrapper>\n        </Styled.InputWithControlsWrapper>\n      </Styled.SettingWrapper>\n      <Styled.SettingWrapper>\n        <Styled.InputWithControlsWrapper>\n          <Styled.GameSetting>\n            {questionsType}\n          </Styled.GameSetting>\n          <Styled.DifficultyButtonWrapper>\n            <Button\n              buttonHandler={props.questionTypesHandler('Complex')}\n              disabled={props.questionsType === QuestionsType.MULTI}\n            >\n              +\n            </Button>\n            <Button\n              buttonHandler={props.questionTypesHandler('Simple')}\n              disabled={props.questionsType === QuestionsType.SINGLE}\n            >\n              -\n            </Button>\n          </Styled.DifficultyButtonWrapper>\n        </Styled.InputWithControlsWrapper>\n      </Styled.SettingWrapper>\n      <Styled.SettingWrapper>\n        <Styled.InputWithControlsWrapper>\n          <Styled.GameSetting>\n            {gameLenght}\n          </Styled.GameSetting>\n          <Styled.DifficultyButtonWrapper>\n            <Button\n              buttonHandler={props.gameLenghtHandler('Longer')}\n              disabled={props.gameLenght === GameLenght.LONG}\n            >\n              +\n            </Button>\n            <Button\n              buttonHandler={props.gameLenghtHandler('Shorter')}\n              disabled={props.gameLenght === GameLenght.SHORT}\n            >\n              -\n            </Button>\n          </Styled.DifficultyButtonWrapper>\n        </Styled.InputWithControlsWrapper>\n      </Styled.SettingWrapper>\n      <Styled.SettingWrapper>\n        <Styled.InputWrapper>\n          <Button\n            isActionButton={true}\n            buttonHandler={startGame}\n            disabled={props.playerName.length ? false : true}\n          >\n            start\n          </Button>\n        </Styled.InputWrapper>\n      </Styled.SettingWrapper>\n    </Styled.MenuWrapper>\n  );\n};\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  difficulty: state.game.difficulty,\n  gameLenght: state.game.gameLenght,\n  playerName: state.game.playerName,\n  questionsType: state.game.questionsType,\n  toBeatScore: state.game.highScore,\n});\n\n// tslint:disable-next-line:no-any\nconst mapDispatchToProps = (dispatch: ThunkDispatch<{}, {}, any>): DispatchProps => ({\n  difficultyHandler: (newDiff: 'Harder' | 'Easier') => () => dispatch(actions.game.setGameDifficulty(newDiff)),\n  gameLenghtHandler: (newLenght: 'Longer' | 'Shorter') => () => dispatch(actions.game.setGameLenght(newLenght)),\n  getQuestions: () => dispatch(actions.question.getQuestsions()),\n  questionTypesHandler: (newType: 'Complex' | 'Simple') => () => dispatch(actions.game.setQuestionsType(newType)),\n  setPlayerName: (playerName: string) => dispatch(actions.game.setPlayerName(playerName)),\n  startGame: () => dispatch(actions.game.startGame()),\n});\n\nexport default connect<StateProps, DispatchProps, IProps, RootState>(mapStateToProps, mapDispatchToProps)(Menu);\n","import styled from 'styled-components';\nimport { colorTheme } from '../common/colorVariables';\n\nexport const SummaryWrapper = styled.div`\n  display: grid;\n  width: 100%;\n  box-sizing: border-box;\n  padding: 5px;\n  grid-template-rows: 80% 10% 10%;\n`\n\nexport const ScoreWrapper = styled.div`\n  display: grid;\n  box-sizing: border-box;\n  padding: 10px;\n  border-top: 2px dashed gray;\n  font-size: 2em;\n  font-weight: bold;\n  place-items: center;\n`\n\nexport const ScoreDiv = styled.div`\n  color: ${colorTheme.activeFont};\n  font-size: 30px;\n  text-align: center;\n`\n\nexport const ScoreSpan = styled.span`\n  color: ${colorTheme.activeFont};\n  text-align: center;\n`\nexport const QuestionWrapper = styled.div`\n  display: grid;\n  width: 100%;\n  height: 100%;\n  border-bottom: 2px dashed gray;\n  grid-template-columns: 10% 90%;\n  text-align: center;\n\n  :last-child {\n    border-bottom: none;\n  }\n`\n\nexport const QuestionsWrapper = styled.div`\n  display: grid;\n  overflow: auto;\n  grid-row-gap: 2%;\n  grid-template-rows: auto;\n`\n\nexport const Answer = styled.div`\n  display: grid;\n  justify-content: center;\n  font-size: 10px;\n  place-items: center;\n`\n\nexport const Question = styled.div`\n  display: grid;\n  color: ${colorTheme.activeFont};\n  font-size: 1em;\n  grid-row-gap: 10%;\n  grid-template-rows: auto;\n`\n\nexport const AnswerText = styled.div`\n  box-sizing: border-box;\n  margin-bottom: 10px;\n  color: ${colorTheme.activeFont};\n  font-weight: bold;\n`","import he from 'he';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport actions from '../../store/actions';\nimport { Question } from '../../store/questions/state';\nimport { RootState } from '../../store/rootState';\nimport Button from '../common/Button/Button.component';\nimport * as Styled from './Summary.styled';\ntype DispatchProps = {\n  setNewGame: () => void;\n  setQuestionsArray: (array: Question[]) => void;\n};\n\ntype StateProps = {\n  score: number;\n  questionsArray: Question[];\n};\n\ntype IProps = {};\n\ntype Props = DispatchProps & StateProps & IProps;\n\nconst Summary: React.SFC<Props> = props => {\n  const loadNewGame = () => {\n    props.setQuestionsArray([]);\n    props.setNewGame();\n  };\n\n  const { questionsArray } = { ...props };\n  return (\n    <Styled.SummaryWrapper>\n        <Styled.QuestionsWrapper>\n          {questionsArray.map(question => {\n            if (question.userAnswer === question.correctAnswer) {\n              return (\n                <Styled.QuestionWrapper key={question.id}>\n                  <Styled.Answer>{he.decode('&#9989;')}</Styled.Answer>\n                  <Styled.Question>\n                    {he.decode(question.question)}\n                    <Styled.AnswerText>{he.decode(question.correctAnswer.toUpperCase())}</Styled.AnswerText>\n                  </Styled.Question>\n                </Styled.QuestionWrapper>\n              );\n            }\n            return (\n              <Styled.QuestionWrapper key={question.id}>\n                <Styled.Answer>{he.decode('&#10060;')}</Styled.Answer>\n                <Styled.Question>\n                  {he.decode(question.question)}\n                  <Styled.AnswerText>{he.decode(question.correctAnswer.toUpperCase())}</Styled.AnswerText>\n                </Styled.Question>\n              </Styled.QuestionWrapper>\n            );\n          })}\n        </Styled.QuestionsWrapper>\n      <Styled.ScoreWrapper>\n        <Styled.ScoreDiv>\n          <Styled.ScoreSpan>Your score was: </Styled.ScoreSpan>\n          {((props.score / (props.questionsArray.length)) * 100).toFixed(1)}%\n        </Styled.ScoreDiv>\n      </Styled.ScoreWrapper>\n      <Button isActionButton={true} buttonHandler={loadNewGame}>\n        new game\n      </Button>\n    </Styled.SummaryWrapper>\n  );\n};\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  questionsArray: state.questions.questionsArray,\n  score: state.game.score,\n});\n\n// tslint:disable-next-line:no-any\nconst mapDispatchToProps = (dispatch: ThunkDispatch<{}, {}, any>): DispatchProps => ({\n  setNewGame: () => dispatch(actions.game.setNewGame()),\n  setQuestionsArray: array => dispatch(actions.question.setQuestionsArray(array))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Summary);\n","import React from 'react';\nimport * as Styled from './Layout.styled';\n\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport actions from '../../store/actions';\nimport { RootState } from '../../store/rootState';\nimport Button from '../common/Button/Button.component';\nimport Game from '../Game/Game.component';\nimport Header from '../Header/Header.component';\nimport Menu from '../Menu/Menu.component';\nimport SummaryComponent from '../Summary/Summary.component';\n\ntype IProps = {\n  gameInProgress: boolean,\n  gameFinished: boolean,\n  isLoading: boolean,\n  questionsLoadFailed: boolean,\n};\n\ntype DispatchProps = {\n  clearQuestionsRequest: () => void,\n  quitGameLoad: () => void,\n};\n\ntype Props = IProps & DispatchProps;\n\nconst Layout: React.SFC<Props> = props => {\n\n  const backToMenu = () => {\n    props.clearQuestionsRequest();\n    props.quitGameLoad();\n  };\n\n  if (props.questionsLoadFailed) {\n    return (\n      <Styled.LayoutWrapper>\n        <Styled.Wrapper>\n          <Header/>\n          <Styled.ErrorWrapper>\n            <Styled.ErrorMsg>Unable to load questions</Styled.ErrorMsg>\n            <Button isActionButton={true} buttonHandler={backToMenu}>Back to menu</Button>\n          </Styled.ErrorWrapper>\n        </Styled.Wrapper>\n    </Styled.LayoutWrapper>\n    );\n  }\n\n  if (props.gameInProgress) {\n    return (\n      <Styled.LayoutWrapper>\n        <Styled.Wrapper>\n          <Header/>\n          <Game />\n        </Styled.Wrapper>\n      </Styled.LayoutWrapper>\n    );\n  }\n\n  if (!props.gameInProgress && props.gameFinished) {\n    return (\n      <Styled.LayoutWrapper>\n        <Styled.Wrapper>\n          <Header/>\n          <SummaryComponent/>\n        </Styled.Wrapper>\n      </Styled.LayoutWrapper>\n    );\n  }\n\n  return (\n    <Styled.LayoutWrapper>\n      <Styled.Wrapper>\n        <Header/>\n        <Menu/>\n      </Styled.Wrapper>\n    </Styled.LayoutWrapper>\n  );\n};\n\nconst mapStateToProps = (state: RootState): IProps => ({\n  gameFinished: state.game.gameFinished,\n  gameInProgress: state.game.gameInProgress,\n  isLoading: state.questions.isLoading,\n  questionsLoadFailed: state.questions.questionsLoadFailed,\n});\n\n// tslint:disable-next-line:no-any\nconst mapDispatchToProps = (dispatch: ThunkDispatch<{}, {}, any>): DispatchProps => ({\n  clearQuestionsRequest: () => dispatch(actions.question.clearQuestionRequest()),\n  quitGameLoad: () => dispatch(actions.game.quitGameLoad())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Layout);\n","import * as actionTypes from './actionTypes';\nimport { GameState, initialState } from './state';\n\nconst gameStartRequested = (state: GameState): GameState => ({\n  ...state,\n  isLoading: true,\n});\n\nconst gameStartCompleted = (state: GameState): GameState => ({\n  ...state,\n  isLoading: false,\n});\n\nconst startGame = (state: GameState): GameState => ({\n  ...state,\n  gameFinished: false,\n  gameInProgress: true,\n  score: 0,\n});\n\nconst finishGame = (state: GameState): GameState => ({\n  ...state,\n  gameFinished: true,\n  gameInProgress: false,\n});\n\nconst setGameLenght = (state: GameState, action: actionTypes.SetLenght): GameState => ({\n  ...state,\n  gameLenght: action.gameLenght\n});\n\nconst setDifficulty = (state: GameState, action: actionTypes.SetDifficulty): GameState => ({\n  ...state,\n  difficulty: action.difficulty\n});\n\nconst setQuestionsType = (state: GameState, action: actionTypes.SetType): GameState => ({\n  ...state,\n  questionsType: action.questionsType\n});\n\nconst setPlayerName = (state: GameState, action: actionTypes.SetPlayerName): GameState => ({\n  ...state,\n  playerName: action.playerName\n});\n\nconst addPoint = (state: GameState): GameState => ({\n  ...state,\n  score: state.score + 1\n});\n\nconst setNewGame = (state: GameState): GameState => ({\n  ...state,\n  gameFinished: false,\n  gameInProgress: false,\n  score: 0,\n});\n\nconst setHighScore = (state: GameState, action: actionTypes.SetHighScore): GameState => ({\n  ...state,\n  highScore: action.highScore,\n});\n\nconst quitGameLoad = (state: GameState): GameState => ({\n  ...state,\n  gameInProgress: false,\n});\n\nconst gameReducer = (state = initialState, action: actionTypes.GameAction) => {\n  switch (action.type) {\n    case '@game/QuitGameLoad': return quitGameLoad(state);\n    case '@game/SetHighScore': return setHighScore(state, action);\n    case '@game/SetNewGame': return setNewGame(state);\n    case '@game/StartGame': return startGame(state);\n    case '@game/FinishGame': return finishGame(state);\n    case '@game/GameStartRequested': return gameStartRequested(state);\n    case '@game/GameStartCompleted': return gameStartCompleted(state);\n    case '@game/SetLenght': return setGameLenght(state, action);\n    case '@game/SetType': return setQuestionsType(state, action);\n    case '@game/SetDifficulty': return setDifficulty(state, action);\n    case '@game/SetPlayerName': return setPlayerName(state, action);\n    case '@game/AddPoint': return addPoint(state);\n    default: return state;\n  }\n};\n\nexport default gameReducer;\n","import { Difficulty, QuestionsType } from '../game/state';\n\nexport type Question = {\n  id: number;\n  category: string;\n  type: QuestionsType;\n  difficulty: Difficulty;\n  question: string;\n  correctAnswer: string;\n  incorrectAnswers: string[];\n  userAnswer: string;\n};\n\nexport type IQuestion = {\n  id: number;\n  category: string;\n  type: QuestionsType;\n  difficulty: Difficulty;\n  question: string;\n  correct_answer: string;\n  incorrect_answers: string[];\n};\n\nexport interface QuestionsState {\n  questionsArray: Question[];\n  currentQuestionId: number;\n  isLoading: boolean;\n  questionsLoadFailed: boolean;\n}\n\nexport const initialState: QuestionsState = {\n  currentQuestionId: 0,\n  isLoading: false,\n  questionsArray: [],\n  questionsLoadFailed: false,\n};\n","import * as actionTypes from './actionTypes';\nimport { initialState, QuestionsState } from './state';\n\nconst getQuestionsRequested = (state: QuestionsState): QuestionsState => ({\n  ...state,\n  isLoading: true,\n});\n\nconst getQuestionsFailed = (state: QuestionsState): QuestionsState => ({\n  ...state,\n  isLoading: false,\n  questionsLoadFailed: true,\n});\n\nconst getQuestionsSuccess = (state: QuestionsState): QuestionsState => ({\n  ...state,\n  isLoading: false,\n});\n\nconst setQuestionsArray = (state: QuestionsState, action: actionTypes.SetQuestionsArray): QuestionsState => ({\n  ...state,\n  currentQuestionId: 0,\n  questionsArray: action.questionsArray\n});\n\nconst changeCurrentQuestion = (state: QuestionsState, action: actionTypes.ChangeCurrentQuestion): QuestionsState => ({\n  ...state,\n  currentQuestionId: action.currentQuestionId\n});\n\nconst answerQuestion = (state: QuestionsState, action: actionTypes.AnswerQuestion): QuestionsState => ({\n  ...state,\n  questionsArray: state.questionsArray.map(\n    (question, i) => i === action.questionId ? { ...question, userAnswer: action.answer } : question\n  )\n});\n\nconst clearQuestionRequest = (state: QuestionsState): QuestionsState => ({\n  ...state,\n  questionsLoadFailed: false,\n});\n\nconst questionReducer = (state = initialState, action: actionTypes.QuestionAction) => {\n  switch (action.type) {\n    case '@question/ClearQuestionRequest': return clearQuestionRequest(state);\n    case '@question/AnswerQuestion': return answerQuestion(state, action);\n    case '@question/GetQuestionsRequested': return getQuestionsRequested(state);\n    case '@question/GetQuestionsFailed': return getQuestionsFailed(state);\n    case '@question/GetQuestionsSuccess': return getQuestionsSuccess(state);\n    case '@question/SetQuestionsArray': return setQuestionsArray(state, action);\n    case '@question/ChangeCurrentQuestion': return changeCurrentQuestion(state, action);\n    default: return state;\n  }\n};\n\nexport default questionReducer;\n","import { combineReducers } from 'redux';\nimport game from './game/reducer';\nimport questions from './questions/reducer';\n\nconst rootReducer = combineReducers({\n  game,\n  questions\n});\n\nexport default rootReducer;\n","import React from 'react';\n\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, compose, createStore } from 'redux';\n\nimport thunk from 'redux-thunk';\nimport Layout from './modules/Layout/Layout.component';\nimport rootReducer from './store/rootReducer';\n\n// tslint:disable-next-line:no-any\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk)\n  ));\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <Layout/>\n    </Provider>\n  );\n};\n\nexport default App;\n","import React, { Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Normalize } from 'styled-normalize';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  (\n  <Fragment>\n    <Normalize/>\n    <App />\n  </Fragment>\n  ),\n  document.getElementById('root')\n);\n"],"sourceRoot":""}